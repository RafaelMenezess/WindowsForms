<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Tls_Principal.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxmaQBdZWoJXGZoD1xmaA9cZmgPXGZoD1xm
        aA9cZmgPXGZoD1xmaA9cZmgPXGZoD1xmaA9cZmgPXGZoD1xmaA9cZmgPXGZoD1xmaA9cZmgPXGZoD1xm
        aA9cZmgPXGZoD1xmaA9cZmgPXGZoClxmaAAAAAAAAAAAAAAAAAAAAAAAnqisAJ+nrGyeqKy/nqesvZ6o
        rL2ep6y9nqesvZ6nrL2eqKy9nqesvZ6orL2eqKy9nqisvZ6orL2eqKy9nqisvZ6orL2eqKy9nqesvZ6o
        rL2eqKy9nqesvZ6nrL2eqKy9nqesvZ6orMKeqKx9nqisAAAAAAAAAAAAAAAAAAAAAAC/yM0AyNHWO7W+
        w7attrv6rba69K22uvSttrr2rbW59622uveut7v3q7S596ixtveosbb3qLG1+Kixtfiosbb3qLG296u0
        ufeut7v3rbW69621uvettrr2rba69a22uvWttrr5s7zBxMbQ1Ua8xssAAAAAAAAAAAAAAAAAAAAAAM7V
        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
        t/OvuL70rra8+aSts/+krbP/oKis/56mq//EzdL/xMvQ/7K4vf+kqrD/usHH/8TN0v+epqr/n6er/6Os
        sf+krLL/rbW8+rC5v/OosbjzsbrA4MHKz3HN1NgExc3SAAAAAAAAAAAAAAAAAAAAAACCi40Ad3+AE4qT
        l5eCi4/+e4SI+oOMkPqGjpL6fISJ+oOLj/qIkZX6kpuf/MbP1P/Dys//pauw/7C2u//HzdP/x8/U/5Ga
        n/yHkJT6hIyR+nyEifqEjJD6hY2R+nuDh/qBiY39iZGVpHyEhReFjZAAAAAAAAAAAAAAAAAAAAAAAIKL
        jgB8hYhzhI6R7YaQlPqNlpv6kZqe+pOcoPqVnaL6lp6j+pagpfqcpKn8vcbL/8XN0v+nrbL/qa+1/8XN
        0v+9xsv/nKSp/JefpPqWn6T6lZ2i+pOcoPqRmp76jZeb+oeQlfqFjpLvfYaLeYKLkAAAAAAAAAAAAAAA
        AAAAAAAAho6TAH6Hi36Jkpf8i5SZ/5Sdov+iq7D/rra7/7K5v/+yusD/srrA/7C4vf+wuL3/wMnO/7zF
        yv+7wsj/wMnO/7C4vf+wuL3/s7rA/7K6wP+yub//rrW7/6OrsP+VnaP/jJSa/4qTmP5+h4yFho6UAAAA
        AAAAAAAAAAAAAAAAAACHj5QAfISIHJCYnl+RmZ6/m6Sp8aCorv+rtLn/t8DG/77Hzf/BytD/wsvR/77H
        zf+2v8T/tb7D/7W+w/+2v8T/vsfN/8LL0f/By9D/v8jN/7jAxv+rtLn/n6it/5ylqvKSm6DHkJidZXuE
        hx+IkJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIeOkQ2LlJg+l6ClnKOsstKjrLH/q7W6/7K7
        wf+7xMr/wcrQ/8HK0P+/yM7/v8jO/8HK0P/BytD/vMTK/7K7wP+stLr/pq2y/6WtstSZoqiijZWbRYuS
        lw8uOD4BQEpQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyEjgAAACIAh5GVKKCq
        r2OcpavGqrK47amyt/2ut7z/t8HG/77Hzf++yM7/uMDH/6+4vv+psrb+q7K48J2nq8+jq7Flj5WdK2tp
        ewGIjJYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABveH0AW2RoAYeQlRGdpak2oKmvm6ixttansbX/rba7/6y2u/+nsLX/pq+126KssJ6Zoqc/j5qdE2l0
        dwJ5hIcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZoagAiZGYLKiwt2Ogqa7Doamuxamxt2aJkZcxmaKoAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIuTmBGLk5cRAAAAABcZ
        FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAB+AAAAfgAAAH4AAAB/gAAB/8AAA//AAAP/wA
        AD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/4AAAf8AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH+AAAD/8A
        AH//gAH///gf///+f/////////////////8=
</value>
  </data>
</root>